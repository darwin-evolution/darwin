{
  "name": "Darwin",
  "tagline": "Small utility to aid in evolutionary code refactorings.",
  "body": "[![Build Status](https://travis-ci.org/darwin-evolution/darwin.svg?branch=master)](https://travis-ci.org/darwin-evolution/darwin)\r\n[![MIT License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\r\n[![Javadocs](http://javadoc.io/badge/com.github.darwin-evolution/darwin.svg)](http://javadoc.io/doc/com.github.darwin-evolution/darwin)\r\n\r\n## The Problem\r\nHow to test refactored code that originally had no tests, unclear specification, no owner, and just begged to end it's misery ?\r\n\r\n## Solution\r\nLet the the users do it for you! All you need are few steps.\r\n\r\n#### Identify your enemy\r\n\r\n```java\r\n\r\npublic class RentalDiscountService {\r\n\r\n    // help needed!! but to be honest, it could've been worse...\r\n    public Double calculateDiscountPercent(Integer movieType, Integer rentalPeriod) {\r\n        if (movieType == 1 || (movieType != 3 &&  rentalPeriod == -1)) {\r\n            return 10.0;\r\n        } else if (movieType == 2 && rentalPeriod == 1) {\r\n            return 40.0;\r\n        } else if (movieType == 4 && rentalPeriod > 10) {\r\n            return 5.0;\r\n        } else {\r\n            return 0.0;\r\n        }\r\n    }\r\n}\r\n         \r\n```\r\n\r\n\r\n#### Add maven dependency\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.darwin-evolution</groupId>\r\n    <artifactId>darwin</artifactId>\r\n    <version>0.9.1</version>\r\n</dependency>\r\n```\r\n\r\n#### Create art not code\r\n\r\n\r\n```java\r\npublic class RentalDiscountCalculator {\r\n\r\n    private static final BigDecimal NO_DISCOUNT = BigDecimal.ZERO;\r\n    private static final BigDecimal WEEKEND_DISCOUNT = BigDecimal.TEN;\r\n    private static final BigDecimal ROMANTIC_EVENING_DISCOUNT = new BigDecimal(40.0);\r\n    private static final BigDecimal FAMILY_WEEK = new BigDecimal(5.0);\r\n\r\n    //piece of art, not code... (please don't judge)\r\n    public BigDecimal calculateDiscount(MovieType movieType, RentalPeriod rentalPeriod) {\r\n        if (movieType.equals(MovieType.COMEDY)\r\n                || (!movieType.equals(MovieType.HORROR) && rentalPeriod.isWeekend())) {\r\n            return WEEKEND_DISCOUNT;\r\n        }\r\n\r\n        if (movieType.equals(MovieType.ROMANCE) && rentalPeriod.isOverNight()) {\r\n            return ROMANTIC_EVENING_DISCOUNT;\r\n        }\r\n\r\n        if (movieType.equals(MovieType.FAMILY) && rentalPeriod.isLongRental())  {\r\n            return FAMILY_WEEK;\r\n        }\r\n\r\n        return NO_DISCOUNT;\r\n    }\r\n}\r\n              \r\n```\r\n\r\n#### Write evolution\r\n\r\nWe encapsulate both implementations in single evolution, in order to test and measure them. \r\nBoth implementations are executed in sequence, starting with legacy one.\r\n\r\n```java\r\n\r\nimport com.github.darwinevolution.darwin.Evolution;\r\nimport com.github.darwinevolution.darwin.execution.harness.EvolvedExecutionHarness;\r\nimport com.github.darwinevolution.darwin.execution.harness.ProtoplastExecutionHarness;\r\n\r\npublic class RentalDiscountService {\r\n\r\n    private RentalDiscountCalculator rentalDiscountCalculator;\r\n\r\n    // we rule don't we?\r\n    public Double calculateDiscountPercent(final Integer movieType, final Integer rentalPeriod) throws Exception {\r\n        return Evolution.<Double>of(\"calculateDiscountPercent\")\r\n                .from(new ProtoplastExecutionHarness<Double>() {\r\n                    @Override\r\n                    public Double execute() throws Exception {\r\n                        arguments(movieType, rentalPeriod); // arguments for logging purposes\r\n                        \r\n                        // run our legacy implementation\r\n                        return legacyCalculateDiscountPercent(movieType, rentalPeriod); \r\n                    }\r\n                }).to(new EvolvedExecutionHarness<Double>() {\r\n                    @Override\r\n                    public Double execute() throws Exception {\r\n                        arguments(movieType, rentalPeriod); // arguments for logging purposes\r\n                        \r\n                        // unleash the beauty!\r\n                        return rentalDiscountCalculator.calculateDiscount(MovieTypeFactory.from(movieType), \r\n                            RentalPeriod.from(rentalPeriod)).doubleValue();\r\n                    }\r\n                }).evolve();\r\n    }\r\n\r\n    // we need to extract it and contain it, before it spreads around all our system...\r\n    private Double legacyCalculateDiscountPercent(Integer movieType, Integer rentalPeriod) {\r\n        if (movieType == 1 || (movieType != 3 && rentalPeriod == -1)) {\r\n            return 10.0;\r\n        } else if (movieType == 2 && rentalPeriod == 1) {\r\n            return 40.0;\r\n        } else if (movieType == 4 && rentalPeriod > 10) {\r\n            return 5.0;\r\n        } else {\r\n            return 0.0;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Configure logger\r\n\r\nResults of our evolution executions will be logged here...\r\n\r\n```xml    \r\n<Loggers>\r\n    <Logger name=\"darwin.evolution\" level=\"trace\" additivity=\"false\">\r\n        ...\r\n    </Logger>\r\n</Loggers>\r\n```\r\n\r\n#### Build it, ship it\r\n\r\nBuild your app and install in any environment (dev, qa, prod).\r\n \r\n#### Analyze produced logs\r\n\r\nWhen someone executes our **RentalDiscountService.calculateDiscountPercent** method, \r\nour logs will contain entries like this ([more info](https://github.com/darwin-evolution/darwin#anchor-1))\r\n\r\n> \"calculateDiscountPercent\"|\"PROTOPLAST\"|\"1463682597919\"|\"OK\"||\"249896\"||||\"171597\"|||\r\n\r\nYou noticed big juicy **OK**? It means values returned by both implementations were equal, so we've just tested our new code\r\nwithout moving a finger. It's nice to have users...\r\n\r\n#### Remove old implementation\r\n\r\nAfter incubation period, may it be a week or a month, when you see in logs that every call\r\nbehaved exactly the same as the old one (or even better) you can \r\nsafely delete all traces of old implementation alongside evolution associated with it.\r\nAnd now you are one step closer to perfection!\r\n\r\n## Documentation\r\n\r\nVisit our project [page](https://github.com/darwin-evolution/darwin).\r\n\r\n\r\n## Authors and Contributors\r\nDamian Kolasa (@fatfredyy)\r\n\r\n### Support or Contact\r\nHaving trouble with Darwin? Check out our [groups](https://groups.google.com/d/forum/darwin-evolution).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}